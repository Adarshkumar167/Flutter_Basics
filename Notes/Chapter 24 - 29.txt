Chapter 24 - Auth Service
-------------------------

Auth provider and auth service
We need an auth provider abstract class and AuthService

Let's clean up our exceptions first

UserNotFoundAuthException

We need an auth user
We shouldn't expose Firebase's user to the UI

AuthUser class 
Authuser isEmailVerifiedField.

We need a factory initializer
factory AuthUser.fromFirebase(User user) => AuthUser(user.emailVerified)


Chapter 25 - Migrating to Auth Service 
--------------------------------------

AuthService.firebase


Chapter 26 - Unit Testing our AuthService
-----------------------------------------

Unit Testing our Auth Service

TDD (Test Driven Development)
Tests need to always be written before code, not the other way around.

Different types of tests
Unit, widget and integration tests

Mocking - you imetating a real service.

What are dev dependencies?
Not used in the final product.

We need our test dependencies
flutter pub add test --dev

Delete existing tests
Delete test/widget_test.dart

Let's create our new tests
Create test/auth_test.dart

Main function of tests
In auth_test.dart, add void main() {}

Let's recompile
Stop the debug session, and rebuild so we get the test package

Make isEmailBerifiedrequired
Go to Authuser and make the isEmailverified required because it's not otherwise clear when we construct it

We need a mock auth provider
Why do we use mocks?
// dependencies injection

Add MockAuthProvider
In test/auth_test.dart

Mock createUser
Future<AuthUser> createUser

Mock currentUser
AuthUser? get currentUser => _user;

Mock initialize
Future<void> initialize() async

Mock login
Future<AuthUser> login

Mock logOut
Future<void> logOut() async

Mock sendEmailVerification
Future<void> sendEmailVerification() async

What are test groups?
For grouping together similar tests

Create your mock provider
Do this in the main() function of your tests

Testing provider.isInitialized
Provider shouldn't be initialized to begin with

Test logging out before initialization
the provider should throw a NotInitializedException

Testing provider initialization
provider.isinitialized

Testing null user to begin with
The user should be null upon initialization

Testing time required to initialize
We can use timeouts in this case

Test creating a user
And test all edge cases that might occur

Test logging out and in again
This is a normal scenario that should just work; let's create a test for it

Now run your tests
flutter test test/auth_test.dart

Chapter 27 - CRUD Local Storage
-------------------------------

What is SQLite?
Why do we even need it?

DB Browser
Creating our use table
CREATE TABLE IF NOT EXISTS "user"...

Creating our note table
CREATE TABLW IF NOT EXISTS "note"...

Creating these programmatically
We need to create this programmatically otherwise we have to move it to docs folder manually.

We need a few dependencies
Flutter pub add => sqflite, path_provider, path

Why do we need these sqflite package?
For storage in our data

Why do we need the path provider?
To get our app's documents directory for database storage

And why do we need the path package?
It has a useful "join" function

Let's create our notes_service.dart file

We need to construct our db path
Use path and path_provider to do that

We need database users
Create DatabaseUser class insider notes_services.dart

Let's open our DB
Future<void> open() async

Closing the DB
Future<void> close() async

Convenience funtion for getting current DB
Database _getDatabaseOrThrow() {

Abilit to fetch users
Future<DatabaseUser> getUser({required String email}) async

Allow notes to be deleted
Future<void> deleteNote({reqired int id}) async


Chapter 28 - Working with Streams in Notes Service
--------------------------------------------------

Caching data
We need the stream and stream controller to cache data

Local list of fetched notes
List<DatabaseNotes> _notes = [];

more view video

Chapter 29 - Preparing Notes View to Read All Notes
---------------------------------------------------

Our AuthUser doesn't have an email
We need and email field to create the user in our DB

Chapter 30 - Preparing to Create New Notes
------------------------------------------

Chapter 31 - Creating New Notes
-------------------------------

